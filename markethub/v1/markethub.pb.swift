// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ssigmaapi/markethub/v1/markethub.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ssigmaapi_Markethub_V1_GetTradesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var markets: [Ssigmaapi_Type_Market] = []

  /// unit is seconds
  var velocityWindowingSize: Int64 = 0

  var volatilityWindowingSize: Int64 = 0

  var volumeWindowingSize: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Markethub_V1_GetTradesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tradesWithMarket: [Ssigmaapi_Markethub_V1_TradesWithMarket] = []

  var exchangeStatus: [Ssigmaapi_Markethub_V1_ExchangeStatus] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Markethub_V1_GetOrderBooksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: [Ssigmaapi_Type_Market] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Markethub_V1_GetOrderBooksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var all: [Ssigmaapi_Type_OrderBook] = []

  var timestamp: Int64 = 0

  var exchangeStatus: [Ssigmaapi_Markethub_V1_ExchangeStatus] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tradesReq: Ssigmaapi_Markethub_V1_GetTradesRequest {
    get {return _storage._tradesReq ?? Ssigmaapi_Markethub_V1_GetTradesRequest()}
    set {_uniqueStorage()._tradesReq = newValue}
  }
  /// Returns true if `tradesReq` has been explicitly set.
  var hasTradesReq: Bool {return _storage._tradesReq != nil}
  /// Clears the value of `tradesReq`. Subsequent reads from it will return its default value.
  mutating func clearTradesReq() {_uniqueStorage()._tradesReq = nil}

  var orderbooksReq: Ssigmaapi_Markethub_V1_GetOrderBooksRequest {
    get {return _storage._orderbooksReq ?? Ssigmaapi_Markethub_V1_GetOrderBooksRequest()}
    set {_uniqueStorage()._orderbooksReq = newValue}
  }
  /// Returns true if `orderbooksReq` has been explicitly set.
  var hasOrderbooksReq: Bool {return _storage._orderbooksReq != nil}
  /// Clears the value of `orderbooksReq`. Subsequent reads from it will return its default value.
  mutating func clearOrderbooksReq() {_uniqueStorage()._orderbooksReq = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tradesRes: Ssigmaapi_Markethub_V1_GetTradesResponse {
    get {return _storage._tradesRes ?? Ssigmaapi_Markethub_V1_GetTradesResponse()}
    set {_uniqueStorage()._tradesRes = newValue}
  }
  /// Returns true if `tradesRes` has been explicitly set.
  var hasTradesRes: Bool {return _storage._tradesRes != nil}
  /// Clears the value of `tradesRes`. Subsequent reads from it will return its default value.
  mutating func clearTradesRes() {_uniqueStorage()._tradesRes = nil}

  var orderbooksRes: Ssigmaapi_Markethub_V1_GetOrderBooksResponse {
    get {return _storage._orderbooksRes ?? Ssigmaapi_Markethub_V1_GetOrderBooksResponse()}
    set {_uniqueStorage()._orderbooksRes = newValue}
  }
  /// Returns true if `orderbooksRes` has been explicitly set.
  var hasOrderbooksRes: Bool {return _storage._orderbooksRes != nil}
  /// Clears the value of `orderbooksRes`. Subsequent reads from it will return its default value.
  mutating func clearOrderbooksRes() {_uniqueStorage()._orderbooksRes = nil}

  var exchangeStatus: [Ssigmaapi_Markethub_V1_ExchangeStatus] {
    get {return _storage._exchangeStatus}
    set {_uniqueStorage()._exchangeStatus = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trade: Ssigmaapi_Type_Trade {
    get {return _storage._trade ?? Ssigmaapi_Type_Trade()}
    set {_uniqueStorage()._trade = newValue}
  }
  /// Returns true if `trade` has been explicitly set.
  var hasTrade: Bool {return _storage._trade != nil}
  /// Clears the value of `trade`. Subsequent reads from it will return its default value.
  mutating func clearTrade() {_uniqueStorage()._trade = nil}

  /// 時間あたりの価格変化の移動平均
  var velocity: Double {
    get {return _storage._velocity}
    set {_uniqueStorage()._velocity = newValue}
  }

  var acceleration: Double {
    get {return _storage._acceleration}
    set {_uniqueStorage()._acceleration = newValue}
  }

  /// 時間あたりの最大価格差
  var volatility: Double {
    get {return _storage._volatility}
    set {_uniqueStorage()._volatility = newValue}
  }

  var volumeBase: Double {
    get {return _storage._volumeBase}
    set {_uniqueStorage()._volumeBase = newValue}
  }

  var volumeQuote: Double {
    get {return _storage._volumeQuote}
    set {_uniqueStorage()._volumeQuote = newValue}
  }

  /// 時間あたりの(buy_volume - sell_volume)/volume
  var momentumRate: Double {
    get {return _storage._momentumRate}
    set {_uniqueStorage()._momentumRate = newValue}
  }

  var velocityWindowingSize: Int64 {
    get {return _storage._velocityWindowingSize}
    set {_uniqueStorage()._velocityWindowingSize = newValue}
  }

  var volatilityWindowingSize: Int64 {
    get {return _storage._volatilityWindowingSize}
    set {_uniqueStorage()._volatilityWindowingSize = newValue}
  }

  var volumeWindowingSize: Int64 {
    get {return _storage._volumeWindowingSize}
    set {_uniqueStorage()._volumeWindowingSize = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ssigmaapi_Markethub_V1_TradesWithMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var market: Ssigmaapi_Type_Market {
    get {return _storage._market ?? Ssigmaapi_Type_Market()}
    set {_uniqueStorage()._market = newValue}
  }
  /// Returns true if `market` has been explicitly set.
  var hasMarket: Bool {return _storage._market != nil}
  /// Clears the value of `market`. Subsequent reads from it will return its default value.
  mutating func clearMarket() {_uniqueStorage()._market = nil}

  var trades: [Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo] {
    get {return _storage._trades}
    set {_uniqueStorage()._trades = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ssigmaapi_Markethub_V1_ExchangeStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var exchange: String = String()

  var `open`: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ssigmaapi.markethub.v1"

extension Ssigmaapi_Markethub_V1_GetTradesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTradesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "markets"),
    2: .standard(proto: "velocity_windowing_size"),
    3: .standard(proto: "volatility_windowing_size"),
    4: .standard(proto: "volume_windowing_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.markets)
      case 2: try decoder.decodeSingularInt64Field(value: &self.velocityWindowingSize)
      case 3: try decoder.decodeSingularInt64Field(value: &self.volatilityWindowingSize)
      case 4: try decoder.decodeSingularInt64Field(value: &self.volumeWindowingSize)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.markets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.markets, fieldNumber: 1)
    }
    if self.velocityWindowingSize != 0 {
      try visitor.visitSingularInt64Field(value: self.velocityWindowingSize, fieldNumber: 2)
    }
    if self.volatilityWindowingSize != 0 {
      try visitor.visitSingularInt64Field(value: self.volatilityWindowingSize, fieldNumber: 3)
    }
    if self.volumeWindowingSize != 0 {
      try visitor.visitSingularInt64Field(value: self.volumeWindowingSize, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetTradesRequest, rhs: Ssigmaapi_Markethub_V1_GetTradesRequest) -> Bool {
    if lhs.markets != rhs.markets {return false}
    if lhs.velocityWindowingSize != rhs.velocityWindowingSize {return false}
    if lhs.volatilityWindowingSize != rhs.volatilityWindowingSize {return false}
    if lhs.volumeWindowingSize != rhs.volumeWindowingSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_GetTradesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTradesResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trades_with_market"),
    2: .standard(proto: "exchange_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.tradesWithMarket)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.exchangeStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tradesWithMarket.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tradesWithMarket, fieldNumber: 1)
    }
    if !self.exchangeStatus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exchangeStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetTradesResponse, rhs: Ssigmaapi_Markethub_V1_GetTradesResponse) -> Bool {
    if lhs.tradesWithMarket != rhs.tradesWithMarket {return false}
    if lhs.exchangeStatus != rhs.exchangeStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_GetOrderBooksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderBooksRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.market)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.market.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.market, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetOrderBooksRequest, rhs: Ssigmaapi_Markethub_V1_GetOrderBooksRequest) -> Bool {
    if lhs.market != rhs.market {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_GetOrderBooksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetOrderBooksResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "all"),
    2: .same(proto: "timestamp"),
    3: .standard(proto: "exchange_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.all)
      case 2: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.exchangeStatus)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.all.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.all, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.exchangeStatus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exchangeStatus, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetOrderBooksResponse, rhs: Ssigmaapi_Markethub_V1_GetOrderBooksResponse) -> Bool {
    if lhs.all != rhs.all {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.exchangeStatus != rhs.exchangeStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTradesAndOrderBooksRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trades_req"),
    2: .standard(proto: "orderbooks_req"),
  ]

  fileprivate class _StorageClass {
    var _tradesReq: Ssigmaapi_Markethub_V1_GetTradesRequest? = nil
    var _orderbooksReq: Ssigmaapi_Markethub_V1_GetOrderBooksRequest? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tradesReq = source._tradesReq
      _orderbooksReq = source._orderbooksReq
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._tradesReq)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._orderbooksReq)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tradesReq {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._orderbooksReq {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksRequest, rhs: Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tradesReq != rhs_storage._tradesReq {return false}
        if _storage._orderbooksReq != rhs_storage._orderbooksReq {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetTradesAndOrderBooksResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trades_res"),
    2: .standard(proto: "orderbooks_res"),
    3: .standard(proto: "exchange_status"),
  ]

  fileprivate class _StorageClass {
    var _tradesRes: Ssigmaapi_Markethub_V1_GetTradesResponse? = nil
    var _orderbooksRes: Ssigmaapi_Markethub_V1_GetOrderBooksResponse? = nil
    var _exchangeStatus: [Ssigmaapi_Markethub_V1_ExchangeStatus] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tradesRes = source._tradesRes
      _orderbooksRes = source._orderbooksRes
      _exchangeStatus = source._exchangeStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._tradesRes)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._orderbooksRes)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._exchangeStatus)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tradesRes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._orderbooksRes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._exchangeStatus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._exchangeStatus, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksResponse, rhs: Ssigmaapi_Markethub_V1_GetTradesAndOrderBooksResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._tradesRes != rhs_storage._tradesRes {return false}
        if _storage._orderbooksRes != rhs_storage._orderbooksRes {return false}
        if _storage._exchangeStatus != rhs_storage._exchangeStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TradeWithAdditionalInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trade"),
    2: .same(proto: "velocity"),
    3: .same(proto: "acceleration"),
    4: .same(proto: "volatility"),
    5: .standard(proto: "volume_base"),
    6: .standard(proto: "volume_quote"),
    7: .standard(proto: "momentum_rate"),
    8: .standard(proto: "velocity_windowing_size"),
    9: .standard(proto: "volatility_windowing_size"),
    10: .standard(proto: "volume_windowing_size"),
  ]

  fileprivate class _StorageClass {
    var _trade: Ssigmaapi_Type_Trade? = nil
    var _velocity: Double = 0
    var _acceleration: Double = 0
    var _volatility: Double = 0
    var _volumeBase: Double = 0
    var _volumeQuote: Double = 0
    var _momentumRate: Double = 0
    var _velocityWindowingSize: Int64 = 0
    var _volatilityWindowingSize: Int64 = 0
    var _volumeWindowingSize: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trade = source._trade
      _velocity = source._velocity
      _acceleration = source._acceleration
      _volatility = source._volatility
      _volumeBase = source._volumeBase
      _volumeQuote = source._volumeQuote
      _momentumRate = source._momentumRate
      _velocityWindowingSize = source._velocityWindowingSize
      _volatilityWindowingSize = source._volatilityWindowingSize
      _volumeWindowingSize = source._volumeWindowingSize
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._trade)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._velocity)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._acceleration)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._volatility)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._volumeBase)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._volumeQuote)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._momentumRate)
        case 8: try decoder.decodeSingularInt64Field(value: &_storage._velocityWindowingSize)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._volatilityWindowingSize)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._volumeWindowingSize)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._trade {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._velocity != 0 {
        try visitor.visitSingularDoubleField(value: _storage._velocity, fieldNumber: 2)
      }
      if _storage._acceleration != 0 {
        try visitor.visitSingularDoubleField(value: _storage._acceleration, fieldNumber: 3)
      }
      if _storage._volatility != 0 {
        try visitor.visitSingularDoubleField(value: _storage._volatility, fieldNumber: 4)
      }
      if _storage._volumeBase != 0 {
        try visitor.visitSingularDoubleField(value: _storage._volumeBase, fieldNumber: 5)
      }
      if _storage._volumeQuote != 0 {
        try visitor.visitSingularDoubleField(value: _storage._volumeQuote, fieldNumber: 6)
      }
      if _storage._momentumRate != 0 {
        try visitor.visitSingularDoubleField(value: _storage._momentumRate, fieldNumber: 7)
      }
      if _storage._velocityWindowingSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._velocityWindowingSize, fieldNumber: 8)
      }
      if _storage._volatilityWindowingSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._volatilityWindowingSize, fieldNumber: 9)
      }
      if _storage._volumeWindowingSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._volumeWindowingSize, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo, rhs: Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trade != rhs_storage._trade {return false}
        if _storage._velocity != rhs_storage._velocity {return false}
        if _storage._acceleration != rhs_storage._acceleration {return false}
        if _storage._volatility != rhs_storage._volatility {return false}
        if _storage._volumeBase != rhs_storage._volumeBase {return false}
        if _storage._volumeQuote != rhs_storage._volumeQuote {return false}
        if _storage._momentumRate != rhs_storage._momentumRate {return false}
        if _storage._velocityWindowingSize != rhs_storage._velocityWindowingSize {return false}
        if _storage._volatilityWindowingSize != rhs_storage._volatilityWindowingSize {return false}
        if _storage._volumeWindowingSize != rhs_storage._volumeWindowingSize {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_TradesWithMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TradesWithMarket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "market"),
    2: .same(proto: "trades"),
  ]

  fileprivate class _StorageClass {
    var _market: Ssigmaapi_Type_Market? = nil
    var _trades: [Ssigmaapi_Markethub_V1_TradeWithAdditionalInfo] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _market = source._market
      _trades = source._trades
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._market)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._trades)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._market {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._trades.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._trades, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_TradesWithMarket, rhs: Ssigmaapi_Markethub_V1_TradesWithMarket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._market != rhs_storage._market {return false}
        if _storage._trades != rhs_storage._trades {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ssigmaapi_Markethub_V1_ExchangeStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExchangeStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exchange"),
    2: .same(proto: "open"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.exchange)
      case 2: try decoder.decodeSingularBoolField(value: &self.`open`)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.exchange.isEmpty {
      try visitor.visitSingularStringField(value: self.exchange, fieldNumber: 1)
    }
    if self.`open` != false {
      try visitor.visitSingularBoolField(value: self.`open`, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ssigmaapi_Markethub_V1_ExchangeStatus, rhs: Ssigmaapi_Markethub_V1_ExchangeStatus) -> Bool {
    if lhs.exchange != rhs.exchange {return false}
    if lhs.`open` != rhs.`open` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
